/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2017. MIT licensed.
 */
var JSONSidenavDemo=JSONSidenavDemo||{};!function(e,t,n,a){"use strict";e(function(){JSONSidenavDemo=function(){var e=this;this.config={jsonURI:"/data/nav.json"},this.loadNavData=function(){return new Promise(function(t,n){var a=new XMLHttpRequest;a.open("GET",e.config.jsonURI),a.onload=function(){200===a.status?t(a.response):n(Error(a.statusText))},a.onerror=function(){n(Error("Network Error"))},a.send()})},this.toggleNavState=function(){var e=n.querySelector("body");e.classList.toggle("nav-open")},this.onHashChange=function(){for(var e=t.location.hash,a=n.querySelectorAll("[data-hash]"),i=0;i<a.length;i++)e.indexOf(a[i].getAttribute("data-hash"))!==-1?a[i].classList.add("active"):a[i].classList.remove("active")},this.eventListeners=function(){var a=n.getElementById("mobile-open-close-btn");a.addEventListener("click",e.toggleNavState),t.onhashchange=e.onHashChange},this.buildNav=function(t){var a=n.getElementById("nav");e.buildList(t.items,a)},this.buildList=function(t,a){for(var i=n.createElement("ul"),s=0;s<t.length;s++){var o=t[s],r=n.createElement("li");r.setAttribute("data-hash",o.url);var l=n.createElement("a");l.setAttribute("href",o.url),l.innerHTML=o.label;var h=n.createElement("span");h.setAttribute("class","glyph-span"),r.appendChild(l),l.appendChild(h),o.items&&o.items.length>0&&(r.className="has-child-nav",e.buildList(o.items,r)),i.appendChild(r)}a.appendChild(i)},this.init=function(){e.loadNavData().then(JSON.parse).then(e.buildNav).then(e.eventListeners).then(e.onHashChange)},this.init()},JSONSidenavDemo=new JSONSidenavDemo})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
